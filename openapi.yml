openapi: 3.0.2
info:
  title: OpenAPI Course
  description: Specification for OpenAPI Course
  termsOfService: http://example.com/terms/
  contact:
    name: John Thompson
    url: https://springframework.guru
    email: john@springframework.guru
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
servers:
  - url: https://dev.example.com
    description: Development Server
  - url: https://qa.example.com
    description: QA Server
  - url: https://prod.example.com
    description: Production Server
paths:
  /v1/customers:
    get:
      summary: List of Customers
      description: Get the list of all **Customers** in the system in paged form
      tags:
        - Customers
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: List of Customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPagedList"
  /v1/customers/{customerId}:
    get:
      summary: Get Customer by ID
      description: Get a **Customer** by its ID value.
      tags:
        - Customers
      parameters:
        # ROUCHE_DOCS: This needs to be the same name of the squiggly string
        - name: customerId
          in: path
          description: Customer ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"

  /v1/beers:
    get:
      summary: List of Beers
      description: Get the list of all **Beers** in the system in paged form
      tags:
        - Beers
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        "404":
          description: No Beers Found
  /v1/beers/{beerId}:
    get:
      summary: Get Beer by ID
      description: Get a **Beer** by its ID value.
      tags:
        - Beers
        - V1 Beers
      parameters:
        - name: beerId
          in: path
          description: Beer ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found beer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beer"

components:
  parameters:
    PageNumberParam:
      name: pagenumber
      in: query
      description: Page number
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParam:
      name: pagesize
      in: query
      description: Page size
      required: false
      schema:
        type: integer
        format: int32
        default: 25

  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 123 main
        city:
          type: string
          example: St Pete
        stateCode:
          maxLength: 2
          minLength: 2
          type: string
          description: 2 Letter State Code
          enum:
            - AL
            - AK
            - AZ
            - AR
            - CA
        zipCode:
          type: string
          example: "33701"
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          maxLength: 100
          minLength: 2
          type: string
          example: John
        lastName:
          maxLength: 100
          minLength: 2
          type: string
          example: Thompson
        address:
          $ref: "#/components/schemas/Address"
      description: customer object
    CustomerList:
      type: array
      items:
        $ref: "#/components/schemas/Customer"
    CustomerPagedList:
      type: object
      properties:
        content:
          $ref: "#/components/schemas/CustomerList"
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
    Brewery:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
    Beer:
      type: object
      properties:
        beerName:
          type: string
        style:
          type: string
          enum:
            - ALE
            - PALE_ALE
            - IPA
            - WHEAT
            - LAGER
        price:
          type: number
          format: float
        quantityOnHand:
          type: integer
          format: int32
        brewery:
          $ref: "#/components/schemas/Brewery"
      description: Beer Object
    BeerList:
      type: array
      items:
        $ref: "#/components/schemas/Beer"
    BeerPagedList:
      type: object
      properties:
        content:
          $ref: "#/components/schemas/BeerList"
      allOf:
        - $ref: "#/components/schemas/PagedResponse"

    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/PagedResponse_pageable"
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/PagedResponse_pageable_sort"
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/PagedResponse_pageable_sort"
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean